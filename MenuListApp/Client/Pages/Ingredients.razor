@page "/ingredients"
@inject HttpClient Http
@inject NotificationService NotificationSvc


<PageTitle>Ingredients</PageTitle>

<h1>Ingredients</h1>

@if (ingredients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid @ref="@ingredientsGrid" AllowFiltering="@true" AllowSorting="@true" AllowColumnResize="@true" PageSize="10" AllowPaging="@true" 
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" PagerHorizontalAlign="HorizontalAlign.Center"
                EditMode="DataGridEditMode.Single" Data="@ingredients" TItem="Ingredient_GridDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="Ingredient_GridDTO" Title="Ingredient name" TextAlign="TextAlign.Center" Filterable="@true" Property="@(nameof(Ingredient_GridDTO.Name))">
                <EditTemplate Context="ingredient">
                    <RadzenTextBox @bind-Value="ingredient.Name" Name="Ingredient Name" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ingredient_GridDTO" Title="Ingredient category" TextAlign="TextAlign.Center" Property="@(nameof(Ingredient_GridDTO.IngredientCategory))" Filterable="@true">
                <Template Context="dto">
                    @dto.IngredientCategoryName
                </Template>
                <EditTemplate Context="dto">
                    <RadzenDropDown TValue="int" Multiple="@false" Data="@ingredientsCategories" Placeholder="Select category" 
                        TextProperty="@(nameof(IngredientCategory_GridDTO.Name))" ValueProperty="@(nameof(IngredientCategory_GridDTO.Id))"
                                @bind-Value="@dto.IngredientCategory" />
                </EditTemplate>
                <FilterTemplate Context="dto">
                    <RadzenDropDown TValue="int?" AllowClear="true" Multiple="@false" Data="@ingredientsCategories" 
                                TextProperty="@(nameof(IngredientCategory_GridDTO.Name))" ValueProperty="@(nameof(IngredientCategory_GridDTO.Id))" 
                                @bind-Value="@catFilter" Change="async (args) => await OnCategoryFilterChange()"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ingredient_GridDTO" Filterable="@false" Sortable="@false" TextAlign="TextAlign.Center">
                <Template Context="ingredient">
                    <RadzenButton Size="ButtonSize.Small" Icon="edit" ButtonStyle="ButtonStyle.Primary" Click="(args) => EditIngredient(ingredient)" />
                </Template>
                <EditTemplate Context="ingredient">
                    <RadzenButton icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Click="(args) => SaveIngredient(ingredient)" />
                    <RadzenButton icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ingredientsGrid.CancelEditRow(ingredient))" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ingredient_GridDTO" Filterable="@false" Sortable="@false" TextAlign="TextAlign.Center">
                <Template Context="ingredient">
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="async (args) => await DeleteIngredient(ingredient)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <br />
    <RadzenButton Icon="add_circle_outline" Text="Add New Item" ButtonStyle="ButtonStyle.Success" Click="(args) => AddIngredient()" />
}

@code {
    private RadzenDataGrid<Ingredient_GridDTO> ingredientsGrid;
    private IngredientCategory_GridDTO[] ingredientsCategories;
    private Ingredient_GridDTO[] ingredients;

    // category filter
    private int? catFilter;

    protected override async Task OnInitializedAsync()
    {
        ingredientsCategories = await Http.GetFromJsonAsync<IngredientCategory_GridDTO[]>("api/IngredientsCategories");
        ingredients = await Http.GetFromJsonAsync<Ingredient_GridDTO[]>("api/Ingredients");
    }

    async Task EditIngredient(Ingredient_GridDTO ingredient)
    {
        await ingredientsGrid.EditRow(ingredient);
    }

    private void AddIngredient()
    {
        ingredientsGrid.InsertRow(new Ingredient_GridDTO());
    }

    private void SaveIngredient(Ingredient_GridDTO ingredient)
    {
        ingredientsGrid.UpdateRow(ingredient);
    }

    private async Task OnCategoryFilterChange()
    {
        ingredientsGrid.Reset();
        ingredients = await Http.GetFromJsonAsync<Ingredient_GridDTO[]>($"api/Ingredients?categoryId={catFilter}");
    }

    private async Task OnCreateRow(Ingredient_GridDTO ingredient)
    {
        Console.WriteLine("In OnCreateRow");
        var res = await Http.PostAsJsonAsync<Ingredient_GridDTO>("api/Ingredients", ingredient);

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                await res.Content.ReadAsStringAsync(),
                8000);
            ingredientsGrid.CancelEditRow(ingredient);
        }
        //reload always
        ingredients = await Http.GetFromJsonAsync<Ingredient_GridDTO[]>("api/Ingredients");
        StateHasChanged();
    }

    private async Task OnUpdateRow(Ingredient_GridDTO ingredient)
    {
        var res = await Http.PutAsJsonAsync<Ingredient_GridDTO>($"api/Ingredients/{ingredient.Id}", ingredient);

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                await res.Content.ReadAsStringAsync(),
                8000);
        }
        // reload always
        ingredients = await Http.GetFromJsonAsync<Ingredient_GridDTO[]>("api/Ingredients");
        StateHasChanged();
    }

    private async Task DeleteIngredient(Ingredient_GridDTO ingredient)
    {
        var res = await Http.DeleteAsync($"api/Ingredients/{ingredient.Id}");

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Deletion failed",
                await res.Content.ReadAsStringAsync(),
                8000);
        }
        else
        {
            ingredients = await Http.GetFromJsonAsync<Ingredient_GridDTO[]>("api/Ingredients");
            StateHasChanged();
        }

    }
}