@page "/menu"
@inject HttpClient Http
@inject NotificationService NotificationSvc

<PageTitle>Menu</PageTitle>

<h1>Menu</h1>

@if (menu == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <RadzenDataGrid @ref="@grid" AllowFiltering="@true" AllowSorting="@true" AllowColumnResize="@true" PageSize="10" AllowPaging="@true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" PagerHorizontalAlign="HorizontalAlign.Center"
                EditMode="DataGridEditMode.Single" Data="@menu" TItem="Menu_GridDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="Menu_GridDTO" Title="Date" TextAlign="TextAlign.Center" Filterable="@true" Property="@(nameof(Menu_GridDTO.Date))"
                              FormatString="{0:d MMM yy}">
                <EditTemplate Context="dto">
                    <RadzenDatePicker @bind-Value="dto.Date" Min=DateTime.Today Name="Date" Style="width:100%; display: block;" ShowTime="false" DateFormat="d MMM yy" />
                </EditTemplate>
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn TItem="Menu_GridDTO" Title="Plate" TextAlign="TextAlign.Center" Property="@(nameof(Menu_GridDTO.Plate))" Filterable="@true" >
                <Template Context="dto">
                    @dto.MenuPlateName
                </Template>
                <EditTemplate Context="dto">
                    <RadzenDropDown TValue="int" Multiple="@false" Data="@plates" Placeholder="Select plate"
                                TextProperty="@(nameof(Plate_EditDTO.Name))" ValueProperty="@(nameof(Plate_EditDTO.Id))"
                                    FormatString="{0:d MMM yy}"  @bind-Value="@dto.Plate" />
                </EditTemplate>
                <FilterTemplate Context="dto">
                    <RadzenDropDown TValue="int?" AllowClear="true" Multiple="@false" Data="@plates"
                                TextProperty="@(nameof(Plate_EditDTO.Name))" ValueProperty="@(nameof(Plate_EditDTO.Id))"
                                @bind-Value="@plateFilter" Change="async (args) => await OnPlateFilterChange()" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Menu_GridDTO" Filterable="@false" Sortable="@false" TextAlign="TextAlign.Center">
                <Template Context="dto">
                    <RadzenButton Size="ButtonSize.Small" Icon="edit" ButtonStyle="ButtonStyle.Primary" Click="(args) => Edit(dto)" />
                </Template>
                <EditTemplate Context="dto">
                    <RadzenButton icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Click="(args) => Save(dto)" />
                    <RadzenButton icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => grid.CancelEditRow(dto))" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Menu_GridDTO" Filterable="@false" Sortable="@false" TextAlign="TextAlign.Center">
                <Template Context="dto">
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="async (args) => await Delete(dto)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <br />
    <RadzenButton Icon="add_circle_outline" Text="Add New Item" ButtonStyle="ButtonStyle.Success" Click="(args) => Add()" />
}

@code
{
    private RadzenDataGrid<Menu_GridDTO> grid;
    private Menu_GridDTO[] menu;
    private Plate_EditDTO[] plates;
    private DateTimeOffset currentDate = DateTimeOffset.Now;

    // plate filter
    private int? plateFilter;

    protected override async Task OnInitializedAsync()
    {
        plates = await Http.GetFromJsonAsync<Plate_EditDTO[]>("api/Plates");
        menu = await Http.GetFromJsonAsync<Menu_GridDTO[]>("api/Menus");
    }

    private async Task Edit(Menu_GridDTO dto)
    {
        await grid.EditRow(dto);
    }

    private async Task Add()
    {
        await grid.InsertRow(new Menu_GridDTO() {Date = currentDate});
    }

    private async Task Save(Menu_GridDTO dto)
    {
        await grid.UpdateRow(dto);
    }

    private async Task OnPlateFilterChange()
    {
        grid.Reset();
        menu = await Http.GetFromJsonAsync<Menu_GridDTO[]>($"api/Menus?plateId={plateFilter}");
    }

    private async Task OnCreateRow(Menu_GridDTO dto)
    {
        var res = await Http.PostAsJsonAsync<Menu_GridDTO>("api/Menus", dto);

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                await res.Content.ReadAsStringAsync(),
                8000);
            grid.CancelEditRow(dto);
        }
        //reload always
        menu = await Http.GetFromJsonAsync<Menu_GridDTO[]>("api/Menus");
        StateHasChanged();
    }

    private async Task OnUpdateRow(Menu_GridDTO dto)
    {
        var res = await Http.PutAsJsonAsync<Menu_GridDTO>($"api/Menus/{dto.Id}", dto);

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                await res.Content.ReadAsStringAsync(),
                8000);
        }
        // reload always
        menu = await Http.GetFromJsonAsync<Menu_GridDTO[]>("api/Menus");
        StateHasChanged();
    }

    private async Task Delete(Menu_GridDTO dto)
    {
        var res = await Http.DeleteAsync($"api/Menus/{dto.Id}");

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Deletion failed",
                await res.Content.ReadAsStringAsync(),
                8000);
        }
        else
        {
            menu = await Http.GetFromJsonAsync<Menu_GridDTO[]>("api/Menus");
            StateHasChanged();
        }

    }
}
