@page "/plates"
@inject HttpClient Http
@inject NotificationService NotificationSvc
@inject DialogService DlgService


<PageTitle>Plates</PageTitle>

<h1>Plates</h1>

@if (plates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid @ref="@grid" AllowFiltering="@true" AllowSorting="@true" AllowColumnResize="@true" PageSize="10" AllowPaging="@true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" PagerHorizontalAlign="HorizontalAlign.Center"
                Data="@plates" TItem="Plate_EditDTO">
        <Columns>
            <RadzenDataGridColumn TItem="Plate_EditDTO" Title="Plate name" TextAlign="TextAlign.Center" Filterable="@true" Property="@(nameof(Plate_EditDTO.Name))">
                <Template Context="dto">
                    <RadzenLink Text="@dto.Name" Path=@($"/plateDetails/{dto.Id}") />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Plate_EditDTO" Title="Plate category" TextAlign="TextAlign.Center" Property="@(nameof(Plate_EditDTO.PlateCategory))" Filterable="@true">
                <Template Context="dto">
                    @dto.PlateCategoryName
                </Template>
                <EditTemplate Context="dto">
                    <RadzenDropDown TValue="int" Multiple="@false" Data="@platesCategories" Placeholder="Select category"
                                TextProperty="@(nameof(PlateCategory_GridDTO.Name))" ValueProperty="@(nameof(PlateCategory_GridDTO.Id))"
                                @bind-Value="@dto.PlateCategory" />
                </EditTemplate>
                <FilterTemplate Context="dto">
                    <RadzenDropDown TValue="int?" AllowClear="true" Multiple="@false" Data="@platesCategories"
                                TextProperty="@(nameof(PlateCategory_GridDTO.Name))" ValueProperty="@(nameof(PlateCategory_GridDTO.Id))"
                                @bind-Value="@catFilter" Change="async (args) => await OnCategoryFilterChange()" />
                </FilterTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <br />
    <RadzenButton Icon="add_circle_outline" Text="Add New Plate" ButtonStyle="ButtonStyle.Primary" Click="@(async (args) => await AddPlate())" />
}

@code {
    private RadzenDataGrid<Plate_EditDTO> grid;
    private PlateCategory_GridDTO[] platesCategories;
    private Plate_EditDTO[] plates;

    // category filter
    private int? catFilter;

    protected override async Task OnInitializedAsync()
    {
        platesCategories = await Http.GetFromJsonAsync<PlateCategory_GridDTO[]>("api/plateCategories");
        plates = await Http.GetFromJsonAsync<Plate_EditDTO[]>("api/plates");
    }

    //async Task Edit(Plate_EditDTO dto)
    //{
    //    await grid.EditRow(dto);
    //}

    //private void Add()
    //{
    //    grid.InsertRow(new Plate_EditDTO());
    //}

    //private void Save(Plate_EditDTO dto)
    //{
    //    grid.UpdateRow(dto);
    //}

    private async Task OnCategoryFilterChange()
    {
        grid.Reset();
        plates = await Http.GetFromJsonAsync<Plate_EditDTO[]>($"api/plates?categoryId={catFilter}");
    }


    private async Task AddPlate()
    {
        var dto = new Plate_EditDTO
            {
                Ingredients = new List<PlateIngredient_GridDTO>()
            };

        var dlgParams = new Dictionary<string, object>() {
            { "DTO", dto },
            { "IsNew", true },
        };

        var res1 = DlgService.Alert("bananas");
        var res2 = DlgService.Confirm("Confirm");
        var res = await DlgService.OpenAsync<Dlg_Plate_Edit>(
            "Add Plate",
            dlgParams,
            new DialogOptions() { Width = "700px", Height = "500px" }
        );
    }
}
