@page "/ShoppingListDetails/{Id:int}/{OpenEdit:bool?}"

@inject HttpClient Http
@inject NotificationService NotificationSvc
@inject DialogService DlgService
@inject NavigationManager NavMan
@inject TooltipService TooltipSvc


<PageTitle>Shopping List Details</PageTitle>

<h1>Shopping List Details</h1>

@if (DTO == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row pb-2">
        <div class="col-md-3 col-sm-12">
            Date:
        </div>
        <div class="col-md-9 col-sm-12">
            @(DTO.Date.ToString("d MMM yy"))
        </div>
    </div>
    <RadzenDataGrid @ref="@grid" AllowFiltering="@false" AllowSorting="@true" AllowColumnResize="@true" PageSize="10" AllowPaging="@true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@DTO.ShoppingListDetails" TItem="ShoppingListDetails_GridDTO">
        <Columns>
            <RadzenDataGridColumn TItem="ShoppingListDetails_GridDTO" Title="Name" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(ShoppingListDetails_GridDTO.ObjectName))" />
            <RadzenDataGridColumn TItem="ShoppingListDetails_GridDTO" Title="Type" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(ShoppingListDetails_GridDTO.ObjectTypeName))" />
            <RadzenDataGridColumn TItem="ShoppingListDetails_GridDTO" Title="Remarks" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(ShoppingListDetails_GridDTO.Remarks))" />
        </Columns>
    </RadzenDataGrid>
    <div class="row pt-2 pb-2">
        <div class="col-md-3 col-sm-12">
            Comments:
        </div>
        <div class="col-md-9 col-sm-12">
            <RadzenTextArea ReadOnly="@true" Rows="3" @bind-Value="@DTO.Comments" Style="width:80%" />
        </div>
    </div>
    <RadzenButton Icon="add_circle_outline" Text="Edit Shopping List" ButtonStyle="ButtonStyle.Secondary" Click="@(async (args) => await Edit())" />
    <RadzenButton Icon="add_circle_outline" Text="Delete Shopping List" ButtonStyle="ButtonStyle.Secondary" Click="@(async (args) => await Delete(DTO.Id))" />
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public bool? OpenEdit { get; set; }

    private RadzenDataGrid<ShoppingListDetails_GridDTO> grid;
    private ShoppingList_DetailsDTO DTO;

    protected override async Task OnInitializedAsync()
    {
        DTO = await Http.GetFromJsonAsync<ShoppingList_DetailsDTO>($"api/shoppingLists/{Id}");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (OpenEdit.HasValue && OpenEdit.Value)
        {
            await Edit();
        }
    }

    private async Task Edit()
    {
        var dto = ShoppingList_EditDTO.CreateFromDetailsDTO(DTO);

        var dlgParams = new Dictionary<string, object>() {
            { "DTO", dto }
        };

        var res = await DlgService.OpenAsync<Dlg_ShoppingList_Edit>(
            "Edit Shopping list",
            dlgParams,
            new DialogOptions() { Width = "800px", Height = "90%" }
        );

        var bRes = res as bool?;
        if (bRes.HasValue && bRes.Value)
        {
            DTO = await Http.GetFromJsonAsync<ShoppingList_DetailsDTO>($"api/shoppingLists/{Id}");
            StateHasChanged();
        }
    }

    private async Task Delete(int id)
    {
        var res = await Http.DeleteAsync($"api/shoppingLists/{id}");

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Deletion failed",
                await res.Content.ReadAsStringAsync(),
                8000);
        }
        else
        {
            NavMan.NavigateTo("shoppingLists");
            StateHasChanged();
        }

    }
}
